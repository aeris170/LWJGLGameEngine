#version 400 core

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;

out vec2 passed_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVectors[4];
out vec3 toCameraVector;
out float visibility;
out vec4 shadowCoords;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 transformationMatrix;
uniform vec3 lightPositions[4];
uniform vec4 clippingPlane;

uniform mat4 toShadowMapSpace;

const float density = 0.001;
const float gradient = 5f;
const float shadowDistance = 300.0;
const float transitionDistance = 10.0;

void main(void) {
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	shadowCoords = toShadowMapSpace * worldPosition;
	gl_ClipDistance[0] = dot(worldPosition, clippingPlane);
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * positionRelativeToCam;
	passed_textureCoordinates = textureCoordinates;
	surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;	
	for(int i = 0; i < 4; i++) {
		toLightVectors[i] = lightPositions[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 0.1)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance * density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
	
	distance = distance - (shadowDistance - transitionDistance);
	distance = distance / transitionDistance;
	shadowCoords.w = clamp(1.0 - distance, 0.0, 1.0);
}